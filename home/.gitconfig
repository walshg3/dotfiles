[include]
	path = ~/.gitconfig.local
	path = ~/.gitconfig.signing
	path = ~/.gitconfig.functions

[core]
	longpaths = true
	excludesFile = ~/.gitignore_global

[init]
	defaultBranch = main

[fetch]
	prune = true

[diff]
	colorMoved = zebra

[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f

[alias]
	# Shortening aliases
### Add file, add and commit all, add patch
	a = add
	ap = add -p
### Commit, checkout, and push
	c = commit --verbose
	co = checkout
	p = push
### Status
	s = status -sb
### Stash and list stashes
	st = stash
	stl = stash list
### Diff, diff stat, diff cached
	d = diff
	ds = diff --stat
	dc = diff --cached
### Add remote origin
	rao = remote add origin

## Git Flow Operations
### Commit all, commit all with message, add and commit all, amend commit
	ca = commit -a --verbose
	cam = commit -a -m
	ac = !git add . && git commit -am
	m = commit --amend --verbose
### Checkout, create and checkout new branch, checkout master, checkout develop
	cob = checkout -b
	com = checkout master
	cod = checkout develop
### Sync and cleanup with remote
	up = !git pull --rebase --prune $@ && git submodule update --init --recursive
### Pushes current branch
	done = !git push origin HEAD
### Creates a savepoint commit
	save = !git add -A && git commit -m 'SAVEPOINT'
### Creates a wip commit
	wip = !git add -u && git commit -m "WIP"
### Go back a single commit
	undo = reset HEAD~1 --mixed
### Reset working directory discarding/removing all files
	res = !git reset --hard
### Pushes current branch
	done = !git push -u origin HEAD
	mr = push -u origin HEAD
### Create a silent savepoint commit and reset back a commit
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
### Add all, commit, and push in one
	rdone = "!f() { git ac \"$1\"; git done; };f"
### Branch Delete:
#>This checks out your local master branch and deletes all local branches that have already been merged to master
	brd = !sh -c \"git checkout master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\"
### Branch Delete Here:
#> Deletes all local branches that have already been merged to the branch that you're currently on
	brdhere = !sh -c \"git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d\"
### Push everything to remote
	pushitgood = push -u origin --all
### Push current to remote
	po = !echo 'Ah push it' && git push origin && echo 'PUSH IT REAL GOOD'
### Merge Test
	mergetest = "!f(){ git merge --no-commit --no-ff \"$1\"; git merge --abort; echo \"Merge aborted\"; };f "
### Rebase interactive against master and dev
	ria = !git rebase -i $(git merge-base HEAD master)
	rid = !git rebase -i $(git merge-base HEAD develop)

## History / Listing

### One-line log
	l = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
### Pretty formatted git log
	lg = !git log --pretty=format:\"%C(magenta)%h%Creset -%C(red)%d%Creset %s %C(dim green)(%cr) [%an]\" --abbrev-commit -30
### List aliases
	la = "!git config -l | grep alias | cut -c 7-"
### List branches sorted by last modified
	lb = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
### List branches and their tracked remotes
	lbr = branch -vv
### Display current branch
	b = rev-parse --abbrev-ref HEAD
### Aside from providing one-line logs, it also shows the branching in/out
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

# Random
### Random dad joke if typo on git add
	dad = !curl https://icanhazdadjoke.com/ && echo

[user]
	email = walshg3@go.stockton.edu
	name = walshg3
[maintenance]
	repo = /Users/gregwalsh/git/CIST2110-S24-Programming-In-Python
