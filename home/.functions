#! /usr/bin/env bash
# Bash / Zsh functions

# Macos functions
if [ "$(uname)" = 'Darwin' ]; then # Begin Darwin check
	# Sketchybar interactivity overloads
	function brew() {
		command brew "$@"

		if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]]; then
			sketchybar --trigger brew_update
		fi

		local dump_commands=('install' 'uninstall') # Include all commands that should do a brew dump
		local main_command="${1}"

		for command in "${dump_commands[@]}"; do
			[[ "${command}" == "${main_command}" ]] && brew bundle dump --file="${HOME}/.Brewfile" --force
		done
	}

	function mas() {
		command mas "$@"

		if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]]; then
			sketchybar --trigger brew_update
		fi
	}

	function zen() {
		~/.config/sketchybar/plugins/zen.sh "$1"
	}

	function push() {
		command git push
		sketchybar --trigger git_push
	}

fi # end Darwin check

ex() {
	if [ -f "$1" ]; then
		filename=$(basename -- "$1")
		foldername="${filename%.*}"
		mkdir -p "$foldername"
		case "$1" in
		*.tar.bz2) tar xjf "$1" -C "$foldername" ;;
		*.tar.gz) tar xzf "$1" -C "$foldername" ;;
		*.bz2)
			bunzip2 -k "$1"
			mv "${filename%.bz2}" "./$foldername/"
			;;
		*.rar) unrar x "$1" "./$foldername/" ;;
		*.gz)
			gunzip -k "$1"
			mv "${filename%.gz}" "./$foldername/"
			;;
		*.tar) tar xf "$1" -C "./$foldername/" ;;
		*.tbz2) tar xjf "$1" -C "./$foldername/" ;;
		*.tgz) tar xzf "$1" -C "./$foldername/" ;;
		*.zip) unzip -d "./$foldername/" "$filename" ;;
		*.Z)
			uncompress "$filename"
			mv "${filename%.Z}" "./$foldername/"
			;;
		*.7z) 7z x "$filename" "-o./$foldername/" ;;
		*) echo "'$filename' cannot be extracted via ex()" ;;
		esac
	else
		echo "'$filename' is not a valid file"
	fi
}

iommu() {
	shopt -s nullglob
	lastgroup=""
	for g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do
		for d in $g/devices/*; do
			if [ "${g##*/}" != "$lastgroup" ]; then
				echo -en "Group ${g##*/}:\t"
			else
				echo -en "\t\t"
			fi
			lastgroup=${g##*/}
			lspci -nms ${d##*/} | awk -F'"' '{printf "[%s:%s]", $4, $6}'
			if [[ -e "$d"/reset ]]; then echo -en " [R] "; else echo -en "     "; fi

			lspci -mms ${d##*/} | awk -F'"' '{printf "%s %-40s %s\n", $1, $2, $6}'
			for u in ${d}/usb*/; do
				bus=$(cat "${u}/busnum")
				lsusb -s $bus: |
					awk '{gsub(/:/,"",$4); printf "%s|%s %s %s %s|", $6, $1, $2, $3, $4; for(i=7;i<=NF;i++){printf "%s ", $i}; printf "\n"}' |
					awk -F'|' '{printf "USB:\t\t[%s]\t\t %-40s %s\n", $1, $2, $3}'
			done
		done
	done
}

nixify() {
	if [ ! -e ./.envrc ]; then
		echo "use nix" >.envrc
		direnv allow
	fi
	if [[ ! -e shell.nix ]] && [[ ! -e default.nix ]]; then
		cat >default.nix <<'EOF'
with import <nixpkgs> {};
mkShell {
  nativeBuildInputs = [
    bashInteractive
  ];
}
EOF
		${EDITOR:-vim} default.nix
	fi
}

flakify() {
	if [ ! -e flake.nix ]; then
		nix flake new -t github:nix-community/nix-direnv .
	elif [ ! -e .envrc ]; then
		echo "use flake" >.envrc
		direnv allow
	fi
	${EDITOR:-vim} flake.nix
}
