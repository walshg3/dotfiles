#!/usr/bin/env bash

source "${HOME}"/.local/bin/helper

sudo yabai --load-sa

# Signal hooks
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
yabai -m signal --add event=window_focused action="sketchybar --trigger window_focus"
yabai -m signal --add event=display_added action="sleep 1 && source $HOME/.local/bin/helper && create_spaces 7"
yabai -m signal --add event=display_removed action="sleep 1 && source $HOME/.local/bin/helper && create_spaces 7"
yabai -m signal --add event=window_created action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_destroyed action="sketchybar --trigger windows_on_spaces"
yabai -m signal --add event=window_created app="Code" action="source ${HOME}/.config/bin/helper && auto_stack Code"
# yabai -m signal --add event=window_created app="Firefox" title!="(â€” Private Browsing$|^Picture-in-Picture$)" action="source ${HOME}/.local/bin/helper && auto_stack Firefox"
# yabai -m signal --add event=window_title_changed app="Firefox" title="- noVNC$" action="yabai -m window ${WINDOW_ID} --toggle native-fullscreen"

# Create managed spaces
# "$HOME"/.config/yabai/create_spaces.sh

# BAR HEIGHT
BAR_HEIGHT=$(sketchybar -m --query bar | jq -r '.height')

# SETUP SPACES
create_spaces 7

GENERAL=(
	external_bar all:"${BAR_HEIGHT}":0
	split_type auto
	split_ratio 0.5
	auto_balance off
	insert_feedback_color 0xff7793d1
)
# external_bar all:39:0 \

WINDOWS=(
	window_placement second_child
	window_topmost on
	window_shadow float
	window_opacity on
	active_window_opacity 1.0
	normal_window_opacity 0.9
	window_animation_duration 0.0
	window_origin_display focused
	window_opacity_duration 0.15
)
# window_topmost off \
# normal_window_opacity 0.95 \
# window_animation_duration 0.15

BORDERS=(
	window_border on
	window_border_blur off
	window_border_hidpi on
	window_border_width 2
	window_border_radius 12
	active_window_border_color 0xff7793d1
	normal_window_border_color 0xff5e6798
)
# window_border_radius 11 \

LAYOUT=(
	layout bsp
	top_padding 20
	bottom_padding 10
	left_padding 10
	right_padding 10
	window_gap 10
)

MOUSE=(
	mouse_modifier super
	mouse_action1 move
	mouse_action2 resize
	mouse_drop_action swap
	focus_follows_mouse autoraise
	mouse_follows_focus off
)

yabai -m config "${GENERAL[@]}"
yabai -m config "${WINDOWS[@]}"
yabai -m config "${BORDERS[@]}"
yabai -m config "${LAYOUT[@]}"
yabai -m config "${MOUSE[@]}"

# SPACE LABELS
LABELS=(
	main
	code
	comms
	ref
	productivity
	media
	vm
	misc
	scratch
)

for ((i = 1; i <= "${#LABELS[@]}"; i++)); do
	yabai -m space "${i}" --label "${LABELS[(($i - 1))]}"
done

# SPACE LAYOUTS
yabai -m config --space comms layout stack window_opacity off
yabai -m config --space media layout stack window_opacity off
yabai -m config --space scratch layout float

# RULES
UNMANAGED=(
	Activity Monitor
	Alfred
	App Store
	Archive Utility
	Authy
	Bitwarden
	Calculator
	Dictionary
	FaceTime
	# Finder
	LibreOffice
	LuLu
	Microsoft Remote Desktop
	Photo Booth
	Python
	ScanSnap
	Screen Sharing
	Screens
	Software Update
	Stats
	Steam
	System Information
	System Preferences
	System Settings
	VLC
	Vimac
	iStat Menus
	zoom.us
)

for ((i = 1; i <= "${#UNMANAGED[@]}"; i++)); do
	yabai -m rule --add label="unmanage_${UNMANAGED[(($i - 1))]}" app="^${UNMANAGED[(($i - 1))]}.*$" manage=off border=off
done

# Exclude problematic apps from being managed:
yabai -m rule --add label="Finder" app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
yabai -m rule --add label="Safari" app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
yabai -m rule --add label="Select file to save to" app="^Inkscape$" title="Select file to save to" manage=off

COMMS=(
	Microsoft Teams
	Mail
	Microsoft Outlook
	Messages
	Spark
	Mail
	Discord
	Thunderbird
	Caprine
	Messenger
	Slack
	Telegram
)

for ((i = 1; i <= "${#COMMS[@]}"; i++)); do
	yabai -m rule --add label="comms_${COMMS[(($i - 1))]}" app="^${COMMS[(($i - 1))]}.*$" space=comms
done

STICKY=(
	Authy Desktop
	1Password
	Bitwarden
	System Preferences
	System Settings
)

for ((i = 1; i <= "${#STICKY[@]}"; i++)); do
	yabai -m rule --add label="sticky_${STICKY[(($i - 1))]}" app="^${STICKY[(($i - 1))]}.*$" sticky=on
done

MEDIA=(
	Music
	Plex
	Spotify
	VLC
)

for ((i = 1; i <= "${#MEDIA[@]}"; i++)); do
	yabai -m rule --add label="media_${MEDIA[(($i - 1))]}" app="^${MEDIA[(($i - 1))]}.*$" space=media
done

# Productivity
PRODUCTIVITY=(
	Notes
	Reminders
	Calendar
	Fantastical
)

for ((i = 1; i <= "${#PRODUCTIVITY[@]}"; i++)); do
	yabai -m rule --add label="productivity_${PRODUCTIVITY[(($i - 1))]}" app="^${PRODUCTIVITY[(($i - 1))]}.*$" space=productivity
done

MAIN=(
	Firefox Developer Edition
	Firefox
	Google Chrome
	Safari
)

for ((i = 1; i <= "${#MAIN[@]}"; i++)); do
	yabai -m rule --add label="main_${MAIN[(($i - 1))]}" app="^${MAIN[(($i - 1))]}.*$" space=main
done

CODE=(
	Qt Creator
	Visual Studio Code
	Visual Studio
	XCode
)

for ((i = 1; i <= "${#CODE[@]}"; i++)); do
	yabai -m rule --add label="code_${CODE[(($i - 1))]}" app="^${CODE[(($i - 1))]}.*$" space=code
done

REF=(
	GitHub
	GitKraken
)

for ((i = 1; i <= "${#REF[@]}"; i++)); do
	yabai -m rule --add label="ref_${REF[(($i - 1))]}" app="^${REF[(($i - 1))]}.*$" space=ref
done

VM=(
	UTM
	Parallels
)

for ((i = 1; i <= "${#VM[@]}"; i++)); do
	yabai -m rule --add label="vm_${VM[(($i - 1))]}" app="^${VM[(($i - 1))]}.*$" space=vm
done

# Keep yabai up to date automatically
# updates from github repo
# YABAI_CERT=yabai-cert sh -c ~/.config/yabai/update.sh &

echo "yabai configuration loaded.."
